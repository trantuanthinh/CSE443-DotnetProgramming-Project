@using System.Security.Claims;
@using Project.Utils;

@{
    var userConverations = ViewData["UserConversations"];
    var isAuthenticated = User.Identity.IsAuthenticated;
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var userRole = User.FindFirstValue(ClaimTypes.Role);
}

@if (isAuthenticated)
{
    <div id="chatToggle" onclick="toggleChat()"
        class="fixed bottom-5 right-5 bg-black text-white text-xl w-12 h-12 rounded-full flex items-center justify-center shadow-lg cursor-pointer z-50">
        <i class="fas fa-comments"></i>
    </div>

    <div id="chatBox" class="fixed bottom-20 right-5 w-96 bg-white border border-gray-300 rounded-lg shadow-lg z-50 hidden">
        <div class="bg-black text-white px-4 py-2 flex justify-between items-center rounded-t-lg">
            <span id="chatTitle" class="font-semibold">Chat Support</span>
            <button onclick="toggleChat()" class="text-white text-lg hover:text-gray-300">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="flex flex-row">
            <div id="userList" class="p-2 border-b border-gray-300 h-auto overflow-y-auto text-sm bg-gray-100 w-1/3">
                <p class="text-gray-600 mb-2">Select a user</p>
                <ul id="users" class="space-y-1">
                    @if (userRole == UserType.Lecturer.ToString())
                    {
                        <li class="flex items-center space-x-2 py-2 px-2 hover:bg-gray-200 rounded-lg cursor-pointer"
                            data-user-id="all" data-user-name="All Managers">
                            <span class="font-semibold">Chat To All</span>
                        </li>
                    }
                    @foreach (var user in userConverations as IEnumerable<User>)
                    {
                        <li class="flex items-center space-x-2 py-2 px-2 hover:bg-gray-200 rounded-lg cursor-pointer"
                            data-user-id="@user.Id" data-user-name="@user.Name">
                            <span class="font-semibold">@user.Name</span>
                        </li>
                    }
                </ul>
            </div>

            <div class="flex-1 flex flex-col">
                <div id="chatMessages" class="p-4 h-64 overflow-y-auto text-sm bg-gray-50 flex-1">
                    <p class="text-gray-600">Welcome! How can we assist you today?</p>
                </div>
                <div class="flex border-t border-gray-300">
                    <input id="chatInput" type="text" placeholder="Type a message..."
                        class="flex-1 px-3 py-2 text-sm border-none focus:outline-none" />
                    <button onclick="sendPrivateMessage()" class="bg-black text-white px-4">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    const currentUser = {
        isAuthenticated: @Json.Serialize(User.Identity?.IsAuthenticated),
        userId: @Json.Serialize(User.FindFirstValue(ClaimTypes.NameIdentifier)),
        userRole: @Json.Serialize(@userRole)
    };

    let connection = null;
    let selectedUserId = null;
    let selectedUserName = "";

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("#users li").forEach(li => {
            li.addEventListener("click", async function () {
                selectedUserId = this.getAttribute("data-user-id");
                selectedUserName = this.getAttribute("data-user-name");
                document.getElementById("chatTitle").innerText = `Chat with ${ selectedUserName }`;

                if (connection && selectedUserId && selectedUserId !== "all") {
                    document.getElementById("chatMessages").innerHTML = "";
                    await connection.invoke("GetChatHistory", selectedUserId);
                } else {
                    document.getElementById("chatMessages").innerHTML = "<p class='text-gray-600'>You are broadcasting to manager.</p>";
                }
            });
        });
    });

    function toggleChat() {
        const chatBox = document.getElementById('chatBox');

        if (connection) {
            connection.stop().then(() => {
                console.log("Disconnected");
            });
            connection = null;
            selectedUserId = null;
        } else {
            connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

            connection.on("LoadChatHistory", (historyList) => {
                document.getElementById("chatMessages").innerHTML = "";
                historyList.forEach(each => {
                    addMessage(each.senderId, each.content);
                });
            });

            connection.on("ReceivePrivateMessage", (fromUserId, message) => {
                addMessage(fromUserId, message);
            });

            connection.start().then(() => {
                console.log("Connected");
            });
        }

        chatBox.classList.toggle('hidden');
    }

    function sendPrivateMessage() {
        const input = document.getElementById('chatInput');
        const messageText = input.value.trim();
        if (!messageText || !connection) return;

        const request = {
            Content: messageText
        };

        if (selectedUserId && selectedUserId !== "all") {
            request.RecipientId = selectedUserId;
        }

        connection.invoke("SendPrivateMessage", request).then(() => {
            input.value = '';
        }).catch(err => console.error("Send failed:", err.toString()));
    }

    function addMessage(fromUserId, message) {
        const chatMessages = document.getElementById('chatMessages');
        const msgElement = document.createElement('div');
        msgElement.className = (fromUserId === currentUser.userId ? 'text-right' : 'text-left') + ' mt-2';
        msgElement.innerHTML = `<span class="inline-block bg-gray-200 px-3 py-1 rounded-lg text-sm">${ message }</span>`;
        chatMessages.appendChild(msgElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
</script>
