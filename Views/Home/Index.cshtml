@model List<Project.Models.Item>
@using Project.Utils;

@{
    ViewData["Title"] = "Home Page";
}

<div class="container mx-auto py-8">
    <h1 class="text-3xl font-bold mb-6 text-black text-center">Available Items</h1>
    @if (Model != null)
    {

        <div class="mb-6 w-full max-w-md mx-auto">
            <div class="relative">
                <svg class="w-5 h-5 text-gray-500 absolute left-3 top-1/2 transform -translate-y-1/2" fill="none"
                    stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <input type="text" id="searchInput" placeholder="Search itemsâ€¦"
                    class="w-full pl-10 p-3 border rounded-md shadow-sm focus:ring-blue-500 focus:border-black outline-none" />
            </div>
        </div>

        <div id="itemContainer">
            <partial name="_ItemList" model="@Model" />
        </div>
    }
    else
    {
        <p class="text-gray-600 text-center">Loading items...</p>
    }

</div>

<div id="borrowModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg w-full max-w-md p-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-6 text-center">Borrow Item</h2>

        <form id="borrowForm" method="post" asp-controller="Home" asp-action="BorrowRequest" class="space-y-6">
            @Html.AntiForgeryToken()
            <input type="hidden" name="itemId" id="modalItemId" />
            <p id="modalItemName" class="text-center text-lg font-medium text-gray-800 mb-4"></p>

            <div>
                <label for="quantityInput" class="block text-sm font-medium text-gray-700 mb-2">Quantity</label>
                <div class="relative rounded-md shadow-sm">
                    <input type="number" name="quantity" id="quantityInput"
                        class="block w-full border-gray-300 rounded-md py-2 px-3 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        placeholder="Enter quantity" required min="1" />
                </div>
            </div>

            <div>
                <label for="requestDate" class="block text-sm font-medium text-gray-700 mb-2">Request Date</label>
                <div class="relative rounded-md shadow-sm">
                    <input type="date" name="requestDate" id="requestDate" required
                        class="block w-full border-gray-300 rounded-md py-2 px-3 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                </div>
            </div>

            <div class="mt-6 flex justify-end gap-4">
                <button type="button" onclick="closeModal()"
                    class="rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Cancel
                </button>
                <button type="submit"
                    class="inline-flex items-center justify-center rounded-md border border-transparent bg-black py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Confirm Borrow
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        const isAuthenticated = @(User.Identity.IsAuthenticated.ToString().ToLower());

        function openModal(itemId, itemName, maxQuantity) {
            if (!isAuthenticated) {
                window.location.href = '/Auth/SignIn';
                return;
            }
            document.getElementById("modalItemId").value = itemId;
            document.getElementById("modalItemName").innerText = `Item: ${ itemName }`;
            const quantityInput = document.getElementById("quantityInput");
            quantityInput.value = 1;
            quantityInput.max = maxQuantity;
            document.getElementById("borrowModal").classList.remove("hidden");
        }

        function closeModal() {
            document.getElementById("borrowModal").classList.add("hidden");
        }

        document.addEventListener("DOMContentLoaded", function () {
            const today = new Date().toISOString().split("T")[0];
            document.getElementById("requestDate").setAttribute("min", today);
        });

        $('#searchInput').on('input', function () {
            const query = $(this).val();
            $.ajax({
                url: '@Url.Action("Search", "Home")',
                type: 'GET',
                data: { query: query },
                success: function (result) {
                    $('#itemContainer').html(result);
                },
                error: function () {
                    $('#itemContainer').html('<p class="text-red-500">Error loading items.</p>');
                }
            });
        });
    </script>
}
