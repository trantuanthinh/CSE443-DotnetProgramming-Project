@model List<Project.Models.Item>

<!-- Items Tab -->
<div class="w-full p-6 bg-white rounded shadow-md">
    <div class="flex justify-between items-center mb-4">
        <h1 class="text-2xl font-bold">Inventory</h1>
        <button class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800" onclick="toggleItemModal(true)">
            Add New Item
        </button>
    </div>

    <!-- Success/Error Message -->
    <div id="itemMessage" class="hidden text-sm mt-4 p-2 rounded text-white"></div>
    <div class="overflow-x-auto flex justify-center">
        <table class="w-full text-md text-gray-700">
            <thead class="bg-gray-100 text-md uppercase font-semibold">
                <tr>
                    <th class="px-6 py-3">Name</th>
                    <th class="px-6 py-3">Image</th>
                    <th class="px-6 py-3">Quantity</th>
                    <th class="px-6 py-3">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
                @foreach (var item in Model)
                {
                    <tr class="hover:bg-gray-50 transition">
                        <td class="px-6 py-4 whitespace-nowrap text-left">@item.Name</td>

                        <td class="px-6 py-4 whitespace-nowrap justify-center">
                            <img src="data:image/jpeg;base64,@item.Image" alt="Image" class="h-4 w-4 object-cover rounded" />
                        </td>
                        <td class="px-6 py-4 text-center">@item.Quantity</td>
                        <td class="flex px-6 py-4 justify-center space-x-4">
                            <button type="button" class="text-blue-600 hover:text-blue-800"
                                onclick='toggleItemModal(true, @Html.Raw(Json.Serialize(item)))' title="Edit">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <form class="delete-form inline" data-id="@item.Id">
                                <button type="submit" class="text-red-600 hover:text-red-800" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="hidden overflow-x-hidden overflow-y-auto fixed inset-0 z-50" id="itemModal">
    <div class="relative w-auto my-6 mx-auto max-w-3xl">
        <div class="bg-white shadow-lg rounded px-8 pt-6 pb-8 mb-4">
            <button type="button" class="absolute top-0 right-0 mt-4 mr-5 text-gray-400 hover:text-gray-500"
                onclick="toggleItemModal(false)">
                &times;
            </button>
            <h1 id="modalTitle" class="text-3xl font-bold mb-4">Add Item</h1>
            <form id="itemForm" asp-controller="Profile" asp-action="HandleItemForm" data-ajax="true"
                data-ajax-method="POST" method="post" enctype="multipart/form-data">
                <input type="hidden" id="itemId" name="id" />

                <div class="mb-4">
                    <label class="block text-sm font-medium mb-1" for="name">Name</label>
                    <input
                        class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-gray-300"
                        id="itemName" name="name" type="text" required />
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium mb-1" for="quantity">Quantity</label>
                    <input
                        class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-gray-300"
                        id="itemQuantity" name="quantity" type="number" required />
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium mb-1" for="categoryId">Category</label>
                    <select id="itemCategoryId" name="categoryId"
                        class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-gray-300"
                        required>
                        <option value="" disabled>-- Select Category --</option>
                        @foreach (var category in (IEnumerable<Project.Models.Category>)ViewData["Categories"])
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium mb-1" for="image">Image</label>
                    <input
                        class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-gray-300"
                        id="itemImage" name="image" type="file" />
                </div>

                <div class="flex justify-end gap-3 pt-2">
                    <button type="button" class="px-4 py-2 border border-gray-400 text-gray-700 rounded"
                        onclick="toggleItemModal(false)">
                        Cancel
                    </button>
                    <button type="submit" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function toggleItemModal(show, item = {}) {
        const modal = document.getElementById('itemModal');
        modal.classList.toggle('hidden', !show);

        if (show) {
            document.getElementById('modalTitle').textContent = item.id ? 'Edit Item' : 'Add Item';
            document.getElementById('itemId').value = item.id || "";
            document.getElementById('itemName').value = item.name || "";
            document.getElementById('itemQuantity').value = item.quantity || "";
            document.getElementById('itemCategoryId').value = item.categoryId || "";
            document.getElementById('itemImage').value = "";
        }
    }

    // Add/Edit submit handler
    async function submitItemForm(e) {
        e.preventDefault();
        const form = document.getElementById("itemForm");
        const formData = new FormData(form);

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            showMessage(result.message, result.success);

            if (result.success) {
                toggleItemModal(false);
                setTimeout(() => location.reload(), 1500);
            }
        } catch (err) {
            showMessage("Something went wrong.", false);
        }
    }

    // Delete item via AJAX
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('.delete-form').forEach(form => {
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                const id = this.getAttribute("data-id");

                try {
                    const response = await fetch('/Profile/DeleteItem', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ id })
                    });

                    const result = await response.json();
                    showMessage(result.message, result.success);

                    if (result.success) {
                        this.closest('tr').remove();
                    }
                } catch (err) {
                    showMessage("Delete failed.", false);
                }
            });
        });
    });

    // Show notification
    function showMessage(message, success) {
        const msgBox = document.getElementById("itemMessage");
        msgBox.textContent = message;
        msgBox.className = "text-sm mt-4 p-2 rounded text-white " + (success ? "bg-green-500" : "bg-red-500");
        msgBox.classList.remove("hidden");

        setTimeout(() => msgBox.classList.add("hidden"), 3000);
    }
</script>
