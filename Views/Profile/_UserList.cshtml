@model ICollection<Project.Models.User>

<!-- User List Tab -->
<div x-show="tab === 'users'" x-cloak class="w-full p-6 bg-white rounded shadow-md">
    <div class="flex justify-between items-center mb-4">
        <h1 class="text-2xl font-bold">User List</h1>
    </div>

    <!-- Success/Error Message -->
    <div id="userMessage" class="hidden text-sm mt-4 p-2 rounded text-white transition duration-300"></div>

    <div class="overflow-x-auto flex justify-center">
        <table class="w-full text-md text-gray-700">
            <thead class="bg-gray-100 text-md uppercase font-semibold">
                <tr>
                    <th class="px-6 py-3 text-left">Name</th>
                    <th class="px-6 py-3 text-center">Email</th>
                    <th class="px-6 py-3 text-center">Role</th>
                    <th class="px-6 py-3 text-center">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
                @foreach (var user in Model)
                {
                    <tr class="hover:bg-gray-50 transition">
                        <td class="px-6 py-4 whitespace-nowrap text-left">@user.Name</td>
                        <td class="px-6 py-4 text-center">@user.Email</td>
                        <td class="px-6 py-4 text-center">@user.Role</td>
                        <td class="flex px-6 py-4 justify-center space-x-4">
                            <button type="button"
                                    class="open-delete-user-modal text-red-600 hover:text-red-800"
                                    data-id="@user.Id" title="Delete">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Confirm Delete Modal -->
<div id="confirmDeleteUserModal" role="dialog" aria-modal="true" class="fixed inset-0 items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-white rounded-lg p-6 shadow-lg w-80 animate-fade-in">
        <h2 class="text-lg font-bold mb-4">Confirm Deletion</h2>
        <p class="mb-6">Are you sure you want to delete this user?</p>
        <div class="flex justify-end space-x-4">
            <button id="cancelDeleteUserBtn" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">Cancel</button>
            <button id="confirmDeleteUserBtn"
                class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Delete</button>
        </div>
    </div>
</div>

<script>
    let deleteUserId = null;
    let deleteTargetRow = null;

    document.addEventListener("DOMContentLoaded", () => {
        const confirmUserModal = document.getElementById("confirmDeleteUserModal");
        const cancelUserBtn = document.getElementById("cancelDeleteUserBtn");
        const confirmUserBtn = document.getElementById("confirmDeleteUserBtn");

        // Open delete modal
        document.querySelectorAll('.open-delete-user-modal').forEach(button => {
            button.addEventListener('click', function () {
                deleteUserId = this.getAttribute('data-id');
                deleteTargetRow = this.closest('tr');
                confirmUserModal.classList.remove('hidden');
                confirmUserModal.classList.add('flex');
            });
        });

        // Cancel deletion
        cancelUserBtn.addEventListener('click', () => {
            confirmUserModal.classList.add('hidden');
            confirmUserModal.classList.remove('flex');
            deleteUserId = null;
            deleteTargetRow = null;
        });

        // Confirm deletion
        confirmUserBtn.addEventListener('click', async () => {
            if (!deleteUserId || !deleteTargetRow) return;

            try {
                const response = await fetch('/Profile/DeleteUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(deleteUserId)
                });

                const result = await response.json();
                showUserMessage(result.message, result.success);

                if (result.success) {
                    deleteTargetRow.remove();
                }
            } catch (err) {
                showUserMessage("Delete failed.", false);
            }

            confirmUserModal.classList.add('hidden');
            deleteUserId = null;
            deleteTargetRow = null;
        });
    });

    function showUserMessage(message, success) {
        const msgUserBox = document.getElementById("userMessage");
        msgUserBox.textContent = message;
        msgUserBox.className = "text-sm mt-4 p-2 rounded text-white transition duration-300 " +
            (success ? "bg-green-500" : "bg-red-500");
        msgUserBox.classList.remove("hidden");

        setTimeout(() => msgUserBox.classList.add("hidden"), 3000);
    }
</script>
